<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编码 on 美味生活</title>
    <link>http://blog.yummy.live/tags/%E7%BC%96%E7%A0%81/</link>
    <description>Recent content in 编码 on 美味生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 May 2020 01:04:48 +0800</lastBuildDate>
    
	<atom:link href="http://blog.yummy.live/tags/%E7%BC%96%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>做游戏的这几年</title>
      <link>http://blog.yummy.live/developmentsummary/</link>
      <pubDate>Thu, 28 May 2020 01:04:48 +0800</pubDate>
      
      <guid>http://blog.yummy.live/developmentsummary/</guid>
      <description>启蒙 记得当时是想着去找一份文案的工作，找了3个月，依然没有找到合适的工作。
旁边的两个邻居是做web前端开发的，建议我学习html跟他们做前端。
后来在学习的过程中看到了cocos引擎，可以用js写游戏。
自己就买了几本cocos2dx-js相关的书籍来学习。
刚开始学习的时候，被脚本语言搞到一脸懵逼，自己跟书上面的代码，各种报错。
却不知道怎么解决，每个报错都上百度上面搜索一下解决办法。
记得最头疼的就是变量的数据类型了，因为脚本语言是弱类型的，不强调变量的数据类型，导致了自己写的东西，报错了，也不知道是什么问题。
被搞到自己都要放弃了。
后来去网上找了教程学C++，看了邵发的C/C++学习指南之后，才发现以前写的东西是怎么回事。
学完了C++之后，就开始去看教程去学习游戏开发。 入行 第一份工作，找了一个月。
当时自己在想，自己是真的适合做游戏吗？
还好当时有一个邻居鼓励我，叫赶紧找工作，还在经济上给予了一些帮助。
说实在话，当时没有经验的小白，每次都有很多面试邀请，都是一些培训机构的。
所谓的面试就是，叫过去做一份笔试，基本上面的题目，都是一些比较难的。
笔试基本上都过不了的，然后所谓的HR就会劝你参加培训。
第一家公司的主程打电话过来，叫我过去面试的时候。
我还以为是培训机构，不想去的。
他说了一句，再怎么说也是一个机会。
后来想了一下就过去面试了。
最后大概过了3天他打电话过来通知我去上班。
第一天上班，在玩公司开发得游戏，看着那本lua程序语言设计。
连续看了3天，自己开始写东西。
花了3天时间写了一个结算面板。
后来因为公司资金问题，重新去找工作了。
也是这家公司的原因吧，之前的项目因为很多东西就是应付需求吧，基本上都不考虑拓展。
当时主程坐在我旁边，只要要去改老项目的东西，就是唉声叹气。
每次提交代码，主程都会去看，哪里写得不好，或者我不懂得东西，他也很认真去教。
在这家公司里面，感觉颠覆了自己当初学编程的想法。
做东西能尽量不要写死，写东西多想想拓展性，可维护性。 工具 第一家公司学到的可以说是如何写好一份易于维护的代码。
第二家公司就是何如利用工具把开发效率提高，减低开发成本，也是我目前做过技术最好的公司。
在第二家公司里面，我就是一个小老弟，同事的做的时间比我长，工作经验也丰富，也很乐意去解答我的问题。
在跟同事学习交流的过程中，不仅学习了很多奇淫巧技，还产生了很多想法，很多想做的东西。
当时只是觉得这里的工具都很好用，做事情起来也快。
最大的感叹莫过于，他们对配置表的运用，对繁琐的东西归纳起来做工具来解决，简直是开启了我对新世界的探索。
在火灵工作的一年里面，虽然没有自己去写过工具。
自己一直都在开发功能，整理代码。
自己也意识到自己的不足，比如每次做好的功能提交上去，很少主动去跟对接人说这东西做好了。
因此主程也找了我不少次去谈话，让我意识到团队的重要性，怎么去减低交流成本等等。 反面教材 如果说第一家公司学到了怎么去写一份可维护的代码。
第二家公司学到怎么开发利用工具去快速开发功能。
那么第三家就是绝对的反面教材，让我意识到规章流程的重要性。
有时候觉得自己当初太年轻了，以为用C++写出来的东西都不会差。
进了公司之后才发现，C++用得不好，坑更大。
据说项目用C++写的不能热更，就把C++部分用lua重写，结果又没有完全重写。
上班几天后，开始写功能，才发现这坑大。
做功能，没有文档，策划说什么就做什么。配置表本来是应该程序定的，也成了策划定了。
策划表没出，什么都做不了。
没有文档，导致了前端，后端，策划，一人一种说法，看着人家的游戏去做。
有的时候，三人的理解不一样，等到做完交付的时候，策划一句话否定，基本两三天的工作就白做了。
后来在开发功能的时候，发现，原来这项目连基本的设计模式都没有，都是硬撸上去的。
自己把导表工具，内部的更新工具写了，又给项目写了事件分发器，调度器，还有特效管理器。。。。。。
10月份的时候，有新的大佬入职。
感觉来了这个大佬，是在这家公司最大的收获了。
跟这位大佬有着相同的爱好，大家都喜欢游戏，也喜欢吃。
在游戏方面，也教导了我很多，推荐了很多游戏给我玩，让我开拓了对游戏的理解。
在技术方面，告诉我一个项目应该怎么去做，给我总结了我以前想的东西，原来我想做的那个自动化叫流水线。
以及做游戏应该去学哪一些方面的知识。 现状 所实在话，现在感觉有点后悔，一直以为数学没什么用。
自从接触了shader之后，才发现，这是假的。
悔不当初，大专的时候没有去学线性代数和微积分。
现在只能看书啃视频来补习。 </description>
    </item>
    
  </channel>
</rss>